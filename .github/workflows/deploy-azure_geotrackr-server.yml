name: Build and deploy Node.js app to Azure Web App - geotrackr-server

on:
  push:
    branches:
      - deploy-azure
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js version
        uses: actions/setup-node@v3
        with:
          node-version: '20.x'

      - name: npm install
        run: |
          cd server
          npm install

      - name: Zip artifact for deployment
        run: |
          cd server
          zip -r ../release.zip .

      - name: Upload artifact for deployment job
        uses: actions/upload-artifact@v4
        with:
          name: node-app
          path: release.zip

  deploy:
    runs-on: ubuntu-latest
    needs: build
    environment:
      name: 'production'
      url: ${{ steps.deploy-to-webapp.outputs.webapp-url }}
    permissions:
      id-token: write #This is required for requesting the JWT

    steps:
      - name: Download artifact from build job
        uses: actions/download-artifact@v4
        with:
          name: node-app

      - name: Unzip artifact for deployment
        run: unzip release.zip

      - name: 'Deploy to Azure Web App'
        id: deploy-to-webapp
        uses: azure/webapps-deploy@v2
        with:
          app-name: 'geotrackr-server'
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          package: .

      - name: Set environment variables
        uses: azure/appservice-settings@v1
        with:
          app-name: 'geotrackr-server'
          app-settings-json: |
            {
              "PORT": "${{ secrets.PORT }}",
              "VERSION": "${{ secrets.VERSION }}",
              "SSL_CERT_PATH": "${{ secrets.SSL_CERT_PATH }}",
              "DATABASE_URL": "${{ secrets.DATABASE_URL }}",
              "JWT_SECRET": "${{ secrets.JWT_SECRET }}",
              "JWT_EXPIRES_IN": "${{ secrets.JWT_EXPIRES_IN }}",
              "EMAIL_USERNAME": "${{ secrets.EMAIL_USERNAME }}",
              "EMAIL_PASSWORD": "${{ secrets.EMAIL_PASSWORD }}",
              "EMAIL_FROM": "${{ secrets.EMAIL_FROM }}",
              "DATA_ENCRYPTION_KEY": "${{ secrets.DATA_ENCRYPTION_KEY }}",
              "CLOUDINARY_CLOUD_NAME": "${{ secrets.CLOUDINARY_CLOUD_NAME }}",
              "CLOUDINARY_API_KEY": "${{ secrets.CLOUDINARY_API_KEY }}",
              "CLOUDINARY_API_SECRET": "${{ secrets.CLOUDINARY_API_SECRET }}"
            }
